// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eth/v1alpha1/ssv.proto

package eth

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StreamTopics int32

const (
	StreamTopics_SIGN_BLOCK        StreamTopics = 0
	StreamTopics_CHECK_BLOCK       StreamTopics = 1
	StreamTopics_SIGN_ATTESTATION  StreamTopics = 2
	StreamTopics_CHECK_ATTESTATION StreamTopics = 3
	StreamTopics_SIGN_AGGREGATION  StreamTopics = 4
)

var StreamTopics_name = map[int32]string{
	0: "SIGN_BLOCK",
	1: "CHECK_BLOCK",
	2: "SIGN_ATTESTATION",
	3: "CHECK_ATTESTATION",
	4: "SIGN_AGGREGATION",
}

var StreamTopics_value = map[string]int32{
	"SIGN_BLOCK":        0,
	"CHECK_BLOCK":       1,
	"SIGN_ATTESTATION":  2,
	"CHECK_ATTESTATION": 3,
	"SIGN_AGGREGATION":  4,
}

func (x StreamTopics) String() string {
	return proto.EnumName(StreamTopics_name, int32(x))
}

func (StreamTopics) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_89dceaa8c6632d30, []int{0}
}

type StreamRequest struct {
	PublicKey            []byte         `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty" ssz-size:"48"`
	Topics               []StreamTopics `protobuf:"varint,2,rep,packed,name=topics,proto3,enum=ethereum.eth.v1alpha1.StreamTopics" json:"topics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *StreamRequest) Reset()         { *m = StreamRequest{} }
func (m *StreamRequest) String() string { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()    {}
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89dceaa8c6632d30, []int{0}
}
func (m *StreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRequest.Merge(m, src)
}
func (m *StreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *StreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRequest proto.InternalMessageInfo

func (m *StreamRequest) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *StreamRequest) GetTopics() []StreamTopics {
	if m != nil {
		return m.Topics
	}
	return nil
}

type Task struct {
	Topic StreamTopics `protobuf:"varint,1,opt,name=topic,proto3,enum=ethereum.eth.v1alpha1.StreamTopics" json:"topic,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*Task_Attestation
	//	*Task_Block
	Data                 isTask_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_89dceaa8c6632d30, []int{1}
}
func (m *Task) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return m.Size()
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

type isTask_Data interface {
	isTask_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Task_Attestation struct {
	Attestation *AttestationData `protobuf:"bytes,2,opt,name=attestation,proto3,oneof" json:"attestation,omitempty"`
}
type Task_Block struct {
	Block *BeaconBlockHeader `protobuf:"bytes,3,opt,name=block,proto3,oneof" json:"block,omitempty"`
}

func (*Task_Attestation) isTask_Data() {}
func (*Task_Block) isTask_Data()       {}

func (m *Task) GetData() isTask_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Task) GetTopic() StreamTopics {
	if m != nil {
		return m.Topic
	}
	return StreamTopics_SIGN_BLOCK
}

func (m *Task) GetAttestation() *AttestationData {
	if x, ok := m.GetData().(*Task_Attestation); ok {
		return x.Attestation
	}
	return nil
}

func (m *Task) GetBlock() *BeaconBlockHeader {
	if x, ok := m.GetData().(*Task_Block); ok {
		return x.Block
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Task) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Task_Attestation)(nil),
		(*Task_Block)(nil),
	}
}

func init() {
	proto.RegisterEnum("ethereum.eth.v1alpha1.StreamTopics", StreamTopics_name, StreamTopics_value)
	proto.RegisterType((*StreamRequest)(nil), "ethereum.eth.v1alpha1.StreamRequest")
	proto.RegisterType((*Task)(nil), "ethereum.eth.v1alpha1.Task")
}

func init() { proto.RegisterFile("eth/v1alpha1/ssv.proto", fileDescriptor_89dceaa8c6632d30) }

var fileDescriptor_89dceaa8c6632d30 = []byte{
	// 534 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xdf, 0x8a, 0xd3, 0x40,
	0x14, 0xc6, 0x3b, 0x6d, 0xb7, 0xe8, 0x74, 0xbb, 0x76, 0x07, 0x2b, 0xb5, 0x4a, 0xb7, 0x54, 0x91,
	0x22, 0x6c, 0xb2, 0x5b, 0x45, 0xd4, 0xbd, 0xb1, 0xa9, 0xa1, 0x5d, 0x2b, 0xbb, 0x4b, 0x12, 0xf6,
	0x42, 0x16, 0xca, 0x24, 0x3b, 0x26, 0xa1, 0x7f, 0x26, 0x66, 0x26, 0x85, 0x2e, 0xe8, 0x85, 0xaf,
	0xe0, 0xa5, 0x6f, 0xe0, 0x93, 0x88, 0x57, 0x82, 0x17, 0xde, 0x89, 0x14, 0x9f, 0xc0, 0x27, 0x90,
	0xce, 0xa4, 0x34, 0x95, 0xad, 0x78, 0x97, 0xf9, 0xce, 0xf7, 0xfd, 0xce, 0xe4, 0xe4, 0x04, 0xde,
	0x20, 0xdc, 0x53, 0x27, 0xfb, 0x78, 0x18, 0x78, 0x78, 0x5f, 0x65, 0x6c, 0xa2, 0x04, 0x21, 0xe5,
	0x14, 0x95, 0x08, 0xf7, 0x48, 0x48, 0xa2, 0x91, 0x42, 0xb8, 0xa7, 0x2c, 0x0c, 0x95, 0x5d, 0xd7,
	0xe7, 0x5e, 0x64, 0x2b, 0x0e, 0x1d, 0xa9, 0x2e, 0x75, 0xa9, 0x2a, 0xdc, 0x76, 0xf4, 0x5a, 0x9c,
	0xc4, 0x41, 0x3c, 0x49, 0x4a, 0xa5, 0xba, 0x42, 0xc7, 0x9c, 0x13, 0xc6, 0x31, 0xf7, 0xe9, 0x38,
	0xae, 0xef, 0xac, 0xd4, 0x6d, 0x82, 0x1d, 0x3a, 0xee, 0xdb, 0x43, 0xea, 0x0c, 0x62, 0xc3, 0x6d,
	0x97, 0x52, 0x77, 0x48, 0x54, 0x1c, 0xf8, 0x2a, 0x1e, 0x8f, 0xa9, 0x4c, 0x33, 0x59, 0xad, 0xbf,
	0x83, 0x05, 0x93, 0x87, 0x04, 0x8f, 0x0c, 0xf2, 0x26, 0x22, 0x8c, 0xa3, 0x3d, 0x08, 0x83, 0xc8,
	0x1e, 0xfa, 0x4e, 0x7f, 0x40, 0xa6, 0x65, 0x50, 0x03, 0x8d, 0x4d, 0x6d, 0xfb, 0xf7, 0x8f, 0x9d,
	0x02, 0x63, 0x17, 0xbb, 0xcc, 0xbf, 0x20, 0x4f, 0xeb, 0x0f, 0x1f, 0xd7, 0x8d, 0xab, 0xd2, 0xd4,
	0x23, 0x53, 0x74, 0x00, 0x73, 0x9c, 0x06, 0xbe, 0xc3, 0xca, 0xe9, 0x5a, 0xa6, 0xb1, 0xd5, 0xbc,
	0xa3, 0x5c, 0xfa, 0xe2, 0x8a, 0xec, 0x63, 0x09, 0xab, 0x11, 0x47, 0xea, 0xdf, 0x01, 0xcc, 0x5a,
	0x98, 0x0d, 0xd0, 0x13, 0xb8, 0x21, 0x24, 0xd1, 0xf2, 0x3f, 0x21, 0x32, 0x81, 0x5e, 0xc0, 0x7c,
	0x62, 0x2e, 0xe5, 0x74, 0x0d, 0x34, 0xf2, 0xcd, 0x7b, 0x6b, 0x00, 0xad, 0xa5, 0xf3, 0x39, 0xe6,
	0xb8, 0x9b, 0x32, 0x92, 0x61, 0xf4, 0x0c, 0x6e, 0x88, 0xe1, 0x95, 0x33, 0x82, 0xd2, 0x58, 0x43,
	0xd1, 0xc4, 0x9c, 0xb5, 0xb9, 0xb3, 0x4b, 0xf0, 0x39, 0x09, 0xbb, 0x29, 0x43, 0x06, 0xb5, 0x1c,
	0xcc, 0x9e, 0x63, 0x8e, 0xef, 0x87, 0x70, 0x33, 0x79, 0x59, 0xb4, 0x05, 0xa1, 0x79, 0xd8, 0x39,
	0xea, 0x6b, 0x2f, 0x8f, 0xdb, 0xbd, 0x62, 0x0a, 0x5d, 0x83, 0xf9, 0x76, 0x57, 0x6f, 0xf7, 0x62,
	0x01, 0xa0, 0xeb, 0xb0, 0x28, 0x0c, 0x2d, 0xcb, 0xd2, 0x4d, 0xab, 0x65, 0x1d, 0x1e, 0x1f, 0x15,
	0xd3, 0xa8, 0x04, 0xb7, 0xa5, 0x2d, 0x29, 0x67, 0x96, 0xe6, 0x4e, 0xc7, 0xd0, 0x3b, 0x52, 0xcd,
	0x36, 0xdf, 0xc2, 0x8c, 0x69, 0x9e, 0xa2, 0x09, 0x2c, 0x74, 0x08, 0x9f, 0x8f, 0x55, 0xde, 0x00,
	0xdd, 0xfd, 0xe7, 0x34, 0xe3, 0x4f, 0x5f, 0xb9, 0xb5, 0xc6, 0x35, 0x07, 0xd5, 0x6b, 0xef, 0xbf,
	0xfd, 0xfa, 0x90, 0xae, 0xa0, 0xb2, 0xfa, 0xf7, 0xba, 0xab, 0x4c, 0x50, 0xf6, 0x80, 0xf6, 0x11,
	0x7c, 0x9e, 0x55, 0xc1, 0xd7, 0x59, 0x15, 0xfc, 0x9c, 0x55, 0x01, 0xbc, 0x49, 0x43, 0xf7, 0x72,
	0xa4, 0x76, 0xc5, 0x34, 0x4f, 0x4f, 0xe6, 0x0b, 0x78, 0x02, 0x5e, 0x3d, 0x4a, 0xfc, 0x10, 0x41,
	0x38, 0x65, 0x23, 0xcc, 0x7d, 0x67, 0x88, 0x6d, 0xa6, 0x2e, 0xb2, 0x38, 0xf0, 0xd9, 0x4a, 0xdb,
	0x03, 0xc2, 0xbd, 0x4f, 0xe9, 0x92, 0xbe, 0x60, 0xeb, 0x09, 0xf6, 0x97, 0xa5, 0x7e, 0xa6, 0x73,
	0xef, 0x6c, 0xa1, 0xdb, 0x39, 0xb1, 0xf1, 0x0f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x61, 0xdc,
	0x21, 0xc1, 0xb0, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SSVClient is the client API for SSV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SSVClient interface {
	GetTaskStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (SSV_GetTaskStreamClient, error)
}

type sSVClient struct {
	cc *grpc.ClientConn
}

func NewSSVClient(cc *grpc.ClientConn) SSVClient {
	return &sSVClient{cc}
}

func (c *sSVClient) GetTaskStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (SSV_GetTaskStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SSV_serviceDesc.Streams[0], "/ethereum.eth.v1alpha1.SSV/GetTaskStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sSVGetTaskStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SSV_GetTaskStreamClient interface {
	Recv() (*Task, error)
	grpc.ClientStream
}

type sSVGetTaskStreamClient struct {
	grpc.ClientStream
}

func (x *sSVGetTaskStreamClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SSVServer is the server API for SSV service.
type SSVServer interface {
	GetTaskStream(*StreamRequest, SSV_GetTaskStreamServer) error
}

// UnimplementedSSVServer can be embedded to have forward compatible implementations.
type UnimplementedSSVServer struct {
}

func (*UnimplementedSSVServer) GetTaskStream(req *StreamRequest, srv SSV_GetTaskStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTaskStream not implemented")
}

func RegisterSSVServer(s *grpc.Server, srv SSVServer) {
	s.RegisterService(&_SSV_serviceDesc, srv)
}

func _SSV_GetTaskStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SSVServer).GetTaskStream(m, &sSVGetTaskStreamServer{stream})
}

type SSV_GetTaskStreamServer interface {
	Send(*Task) error
	grpc.ServerStream
}

type sSVGetTaskStreamServer struct {
	grpc.ServerStream
}

func (x *sSVGetTaskStreamServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

var _SSV_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ethereum.eth.v1alpha1.SSV",
	HandlerType: (*SSVServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTaskStream",
			Handler:       _SSV_GetTaskStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "eth/v1alpha1/ssv.proto",
}

func (m *StreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Topics) > 0 {
		dAtA2 := make([]byte, len(m.Topics)*10)
		var j1 int
		for _, num := range m.Topics {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintSsv(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintSsv(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Topic != 0 {
		i = encodeVarintSsv(dAtA, i, uint64(m.Topic))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Task_Attestation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task_Attestation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Attestation != nil {
		{
			size, err := m.Attestation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSsv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Task_Block) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task_Block) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSsv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func encodeVarintSsv(dAtA []byte, offset int, v uint64) int {
	offset -= sovSsv(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovSsv(uint64(l))
	}
	if len(m.Topics) > 0 {
		l = 0
		for _, e := range m.Topics {
			l += sovSsv(uint64(e))
		}
		n += 1 + sovSsv(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Topic != 0 {
		n += 1 + sovSsv(uint64(m.Topic))
	}
	if m.Data != nil {
		n += m.Data.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Task_Attestation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Attestation != nil {
		l = m.Attestation.Size()
		n += 1 + l + sovSsv(uint64(l))
	}
	return n
}
func (m *Task_Block) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovSsv(uint64(l))
	}
	return n
}

func sovSsv(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSsv(x uint64) (n int) {
	return sovSsv(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSsv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSsv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSsv
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSsv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v StreamTopics
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSsv
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= StreamTopics(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Topics = append(m.Topics, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSsv
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSsv
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSsv
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Topics) == 0 {
					m.Topics = make([]StreamTopics, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v StreamTopics
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSsv
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= StreamTopics(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Topics = append(m.Topics, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSsv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSsv
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSsv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSsv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			m.Topic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSsv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Topic |= StreamTopics(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSsv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSsv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSsv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AttestationData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Task_Attestation{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSsv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSsv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSsv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BeaconBlockHeader{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Task_Block{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSsv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSsv
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSsv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSsv(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSsv
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSsv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSsv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSsv
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSsv
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSsv
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSsv        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSsv          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSsv = fmt.Errorf("proto: unexpected end of group")
)
